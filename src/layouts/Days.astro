---
import Day from "@components/Day.astro";
import { getCollection } from "astro:content";
import type { z } from "astro/zod";
import type * as types from "@types";

interface Props {
  lang: z.infer<typeof types.languages>;
}

const { lang } = Astro.props;
const days = await getCollection("days");
days.sort((a, b) => {
  // those strings consists of ascii numeral digits so we do not need to use `localeCompare`
  const aMonthDay = a.data.date.slice(5);
  const bMonthDay = b.data.date.slice(5);
  if (aMonthDay < bMonthDay) {
    return -1;
  } else if (aMonthDay > bMonthDay) {
    return 1;
  } else {
    const aYear = a.data.date.slice(0, 4);
    const bYear = b.data.date.slice(0, 4);
    if (aYear < bYear) {
      return -1;
    } else if (aYear > bYear) {
      return 1;
    } else {
      // if all same, use name
      return a.data.name.en.localeCompare(b.data.name.en);
    }
  }
});
---

<table class="w-full">
  <thead class="hidden">
    <tr>
      <th>Year</th>
      <th>Date</th>
      <th>Name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    {days.map((day) => <Day lang={lang} day={day} />)}
    <tr><td></td><td></td><td class="p-1 text-gray-500">...</td></tr>
  </tbody>
</table>
